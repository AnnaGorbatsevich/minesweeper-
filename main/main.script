local blocksize = 62
local left_edge = 10	
local bottom_edge = 10
local boardwidth = 10
local boardheight = 10

local function new_game(self) 
	msg.post("#", "start_level")
	msg.post("balls#gui", "reset_text")
	msg.post("balls#gui", "restart")
	self.first_color = nil
	self.linking = false
	self.link = {}
	self.game_over = false
	self.started = true
end

function init(self)
	
	msg.post(".", "acquire_input_focus")
	self.board = {}
	self.started = false
	msg.post("balls#gui", "reset_text")
	-- new_game(self)
end





local function remove_link(self)
	--Если образовался блок из трех, их надо выкинуть
	if #self.link == 3 then 
		for _,elem in pairs(self.link) do
			msg.post(elem.id, "delete")
			self.board[elem.x][elem.y] = nil
		end
	--Если образовался блок из двух, то это просто ерунда, сбросим
	elseif #self.link == 2 then 
		for _,elem in pairs(self.link) do
			msg.post(elem.id, "reset")
		end
	--Если образовался блок из одного, то раскроем его цвет
	elseif #self.link == 1 then
		for _,elem in pairs(self.link) do
			msg.post(elem.id, "color")
			self.board[elem.x][elem.y].enable = true;
			-- проверочка на цвета
			if self.first_color ~= nil and self.first_color ~= elem.color then
				self.game_over = true
				msg.post("balls#gui", "game_over")
				return
			elseif self.first_color == nil then
				self.first_color = elem.color
			end

			msg.post("balls#gui", "add_score")
		end
	end
end


local function add_to_link(self, x, y)
	-- Находимся за пределами поля
	if x < 0 or x >= boardwidth or y < 0 or y >= boardheight then
		return
	end

	-- Если удаленная, то просто игнорируем ее
	if self.board[x][y] == nil then
		return 
	end

	-- уже захвачена цепочка из трех, больше нельзя
	if #self.link == 3 then
		return
	end

	for _,elem in pairs(self.link) do
		-- Если такую уже добавли, то второй раз не надо
		if elem.id == self.board[x][y].id then
			return
		end
	end

	-- цветные не трогаем, их нельзя выкинуть или открыть
	if self.board[x][y].enable then
		return
	end

	-- Добавляем еще одну точку и увеличиваем ее
	msg.post(self.board[x][y].id, "zoom")
	table.insert(self.link,  self.board[x][y])
end


function on_input(self, action_id, action)
	
	
	if action_id == hash("touch") or self.linking then
		
		local x = math.floor((action.x - left_edge) / blocksize)
		local y = math.floor((action.y - bottom_edge) / blocksize)

		--Если нажали кнопочку start
		if (x == boardwidth or x == boardwidth + 1) and y == 0 and action.released then
			if self.started then 
				for x = 0,boardwidth-1 do
					for y = 0,boardheight-1 do
						if self.board[x][y] ~= nil then
							msg.post(self.board[x][y].id, "delete")
							self.board[x][y] = nil
						end
					end
				end
			end
			new_game(self)
			return
		end

		-- Ни одна игра еще не начата
		if not self.started then
			return
		end

		
		-- Если игра закончилась и нажали не рестарт, то не реагируем
		if self.game_over then
			return
		end
		
		
		-- Вдруг ушли мышкой за границу, нужно сбросить увеличение 
		-- и применить нужные изменения к цепочке
		if x < 0 or x >= boardwidth or y < 0 or y >= boardheight then
			
			remove_link(self)
			self.linking = false
			self.link = {}
			return
		end

		-- Если удаленная, то просто игнорируем ее
		if self.board[x][y] == nil then
			return 
		end

		add_to_link(self, x, y)

		--Если отпустили нажатие, то применим изменения к цепочке
		if action.released then
			remove_link(self)
			self.linking = false
			self.link = {}
			
		elseif action.pressed then
			self.linking = true
		end
	end
end




local colors = {hash("red"), hash("blue") }

local function build_board()
	local board = {}
	math.randomseed(os.time())
	local pos = vmath.vector3()
	local x = 0
	local y = 0
	local red = 0
	local blue = 0
	for x = 0,boardwidth-1 do
		pos.x = left_edge + blocksize / 2 + blocksize * x
		board[x] = {}
		for y = 0,boardheight-1 do
			pos.y = bottom_edge + blocksize / 2 + blocksize * y
			local color = colors[math.random(#colors)]
			if blue == 50 then
				color = hash("red")
			elseif red == 50 then
				color = hash("blue")
			end
			if color == hash("blue") then
				blue = blue + 1
			else
				red = red + 1
			end
			
			local id = factory.create("#factory", pos, null, { color = color })
			board[x][y] = { id = id, x = x, y = y, color=color, enable=true}
		end
	end	
	for x = 0,boardwidth-1 do
		for y = 0,boardheight-1 do
			msg.post(board[x][y].id, "color")
		end
	end
	timer.delay(3, false, function() for x = 0,boardwidth-1 do
		for y = 0,boardheight-1 do
			if board[x][y] ~= nil then
				msg.post(board[x][y].id, "reset")
				board[x][y].enable = false
			end
		end
	end end)
	
	return board
end


--


function on_message(self, message_id, message, sender)
	if message_id == hash("start_level") then
		--
		self.board = build_board()
	end
end



